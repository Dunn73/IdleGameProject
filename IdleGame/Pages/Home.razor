@page "/"
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject GlobalBool GlobalVariable
@inject GlobalSave GlobalSave
@inject GlobalPage GlobalPage
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime

@using System.Diagnostics;
@using Models.Battalions
@using Models.GlobalVariables;
@using Models.SaveState;
@using System.Reflection


<PageTitle>Kingdom</PageTitle>

<style>
    body {
        background-color: #e8fcee;
        
        
    }
    .testCss {
        
    }
</style>

@if (showModal) {
    <Modal Title="Greetings, choose your Title and Name" OnClose="HandleCloseModal" />
}

<div style="display: flex; flex-direction: column; width: max-content;">
<h3 style="font-size: 25px; text-align: center; font-family: garamond, cursive;">@($"{GlobalSave.NewSave.PlayerInfo.KingdomName}")</h3>
<h3 style="font-size: 18px; text-align: center; font-family: garamond, cursive;">@($"Owned by: {GlobalSave.NewSave.PlayerInfo.Title} {GlobalSave.NewSave.PlayerInfo.Name}")</h3>
<div style="width: 400px; height: 400px; background-color: aliceblue;"></div>
</div>

<button @onclick="BuildWizard">Wizard +5</button> 
<button @onclick="KingdomCombat">Combat Simulator</button>
<button @onclick="ResetFile">RESET FILE</button>

@code {
    private static int tickCount = 0;
    public bool paused = false;
    public CancellationTokenSource cancellationTokenSource;
    public  CancellationToken cancellationToken;
    bool showModal = false;
    bool lightDirectionRight = true;
    bool lightDirectionRightInner = true;
    bool shouldRender = true;
    int currentCase = 1;
    string[] colorAnimationSchemeLight =["#f8fc6f","#e9ed55", "#e1e62e", "#c7cc06", "#fcbc62", "#e6a64c", "#cc8829", "#a8680f", "#854e03", "#ed773b",
                                        "#cc5c23", "#a3400d", "#7d2c02", "#eb6854", "#c44531", "#9c2816", "#7d190a", "#9c0e0e",
                                         "#ede855", "#cfca48", "#b5b13e", "#999634", "#7d7a29", "#615f20", "#474618", "#363412", "#362612", "#573d1d",
                                         "#755227", "#946832", "#b07c3c", "#cf9146", "#f0a74f","#f08d4f", "#d67e47", "#b86c3d", "#965933", "#7a4828", "#57331c",
                                          "#451e15", "#662c1f", "#8a3b29", "#b04c35", "#d45b3f", "#f06748"];
    string[] colorAnimationSchemeLightInner =["#f55", "#de4747", "#ba3a3a", "#ba3a3a", "#ba3a3a", "#ba3a3a", "#2e0e0e", "#2e0e0e", "#691f1f", "#822626", 
                                              "#9e2e2e", "#b83535", "#b83535", "#d43d3d", "#fa4848"];
    int lightAnimationValue = 0;
    int lightAnimationInnerValue = 0;
    
    protected override async Task OnInitializedAsync(){
        GlobalSave.OnTimeChanged += SaveLocalStorage;

        if (GlobalBool.TimerStarted == false){
            GlobalSave.NewSave = new TutorialSave();
        }
        GlobalPage.PageNumber = 1;
        CastleAnimation();

         if (await localStorage.GetItemAsync<EmptySave>("saveState") == null){
            await localStorage.SetItemAsync<EmptySave>("saveState", GlobalSave.NewSave);
            showModal = true;
            GlobalSave.NewSave = await localStorage.GetItemAsync<EmptySave>("saveState");
        }
        else {
            GlobalSave.NewSave = await localStorage.GetItemAsync<EmptySave>("saveState");
        }

        if (GlobalBool.TimerStarted == false){
            GlobalVariable.FirstRender = false;
            cancellationTokenSource = new CancellationTokenSource();
            cancellationToken = cancellationTokenSource.Token;
            GlobalBool.TimerStarted = true;
            await JSRuntime.InvokeVoidAsync("timerWorker.start");
            await GameTimer();
            
            
        }
    }
    
    [JSInvokable]
    public static Task OnTimerTick() {

        GlobalSave.NewSave.PlayerUnits.Wizards.Count ++;
        GlobalSave.NotifyTimeChanged();
        return Task.CompletedTask;
    }
    // Currently responsible for using javascript web worker to save current save to local storage
    private void SaveLocalStorage() {
        localStorage.SetItemAsync<EmptySave>("saveState", GlobalSave.NewSave);
        InvokeAsync(StateHasChanged);
    }
    public void Dispose() {
        JSRuntime.InvokeVoidAsync("timerWorker.stop");
    }
    public async Task ResetFile() {
        await localStorage.RemoveItemAsync("saveState");
        NavManager.NavigateTo("/", forceLoad:true); // reloads the page so that creation of a new character can trigger
    }
    public async Task GameTimer(){
        while (GlobalBool.TimerStarted){
            try {
                await localStorage.SetItemAsync<EmptySave>("saveState", GlobalSave.NewSave);
                await Task.Delay(1000);
                GlobalSave.NewSave.PlayerUnits.Rangers.Count += 1;
                GlobalSave.NotifyPlayerUnitsChanged();
                StateHasChanged();
            }
            catch (TaskCanceledException) {
            }
        }
    }

    public async Task KingdomCombat() {
        int totalHealth = 0;
        int totalMageOffence = 0;
        int totalMageDefence = 0;
        int totalRangeOffence = 0;
        int totalRangeDefence = 0;
        int totalMeleeOffence = 0;
        int totalMeleeDefence = 0;
        
        foreach (PropertyInfo unit in typeof(PlayerBattalions).GetProperties()){
            var unitCount = unit.GetValue(GlobalSave.NewSave.PlayerUnits);
            if (unitCount != null){
                Console.WriteLine($"{unit.Name}:");
                var unitProperty = unitCount.GetType().GetProperty("Unit");
                var countProperty = unitCount.GetType().GetProperty("Count");
                if (unitProperty != null){
                    var unitInstance = unitProperty.GetValue(unitCount);
                    var numUnits = countProperty.GetValue(unitCount);
                    foreach (var property in unitInstance.GetType().GetProperties()){
                        Console.WriteLine($"{property.Name}: {property.GetValue(unitInstance)}");

                    // Add each unit's property values to the corresponding totals
                    switch (property.Name) {
                        case "Health":
                            totalHealth += ((int)property.GetValue(unitInstance) * Convert.ToInt32(numUnits));
                            break;
                        case "MagicOffence":
                            totalMageOffence += ((int)property.GetValue(unitInstance) * Convert.ToInt32(numUnits));
                            break;
                        case "MagicDefence":
                            totalMageDefence += ((int)property.GetValue(unitInstance) * Convert.ToInt32(numUnits));
                            break;
                        case "RangeOffence":
                            totalRangeOffence += ((int)property.GetValue(unitInstance) * Convert.ToInt32(numUnits));
                            break;
                        case "RangeDefence":
                            totalRangeDefence += ((int)property.GetValue(unitInstance) * Convert.ToInt32(numUnits));
                            break;
                        case "MeleeOffence":
                            totalMeleeOffence += ((int)property.GetValue(unitInstance) * Convert.ToInt32(numUnits));
                            break;
                        case "MeleeDefence":
                            totalMeleeDefence += ((int)property.GetValue(unitInstance) * Convert.ToInt32(numUnits));
                            break;
                        default:
                    break;
                    }

                    }
                }
            }
        }
        Console.WriteLine($"{totalHealth}");
    }

    public void BuildWizard() {
        GlobalSave.NewSave.PlayerUnits.Wizards.Count += 5;
        GlobalSave.NotifyPlayerUnitsChanged();
        foreach (PropertyInfo prop in typeof(PlayerBattalions).GetProperties()){
            var unitCount = prop.GetValue(GlobalSave.NewSave.PlayerUnits);
            if (unitCount != null){
                PropertyInfo countProp = unitCount.GetType().GetProperty("Count");
                if (countProp != null){
                    int? count = (int?)countProp.GetValue(unitCount);
                    Console.WriteLine($"{prop.Name}: {count}");
                }
            }
            
        }
    
    }

    public async Task CastleAnimation() {
        while (GlobalPage.PageNumber == 1){
            if (lightAnimationValue == 0){
                lightDirectionRight = true;
                lightAnimationValue ++;
            }
            else if (lightAnimationValue == colorAnimationSchemeLight.Length-1){
                lightDirectionRight = false;
            }
            if (lightDirectionRight){
                lightAnimationValue ++;
            }
            else {
                lightAnimationValue --;
            }
            if (lightAnimationInnerValue == 0){
                lightDirectionRightInner = true;
                lightAnimationInnerValue ++;
            }
            else if (lightAnimationInnerValue == colorAnimationSchemeLightInner.Length-1){
                lightDirectionRightInner = false;
            }
            if (lightDirectionRightInner){
                lightAnimationInnerValue ++;
            }
            else {
                lightAnimationInnerValue --;
            }
            StateHasChanged();
            await Task.Delay(200);
        }
    }
    private void StopTimer() {
        cancellationTokenSource?.Cancel();
    }
     private async Task HandleSubmit(string titleAndName)
    {
        showModal = false;
        // You can use the titleAndName value here
        await Task.CompletedTask;
    }

    void ToggleModal()
    {
        showModal = !showModal;
    }
    void HandleCloseModal()
    {
        showModal = false; // Update the showModal variable to close the modal
    }
}

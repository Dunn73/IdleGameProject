@page "/"
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject GlobalBool GlobalVariable
@inject GlobalSave GlobalSave
@inject GlobalPage GlobalPage
@inject NavigationManager NavManager

@using System.Diagnostics;
@using Models.GlobalVariables;
@using Models.SaveState;


<PageTitle>Kingdom</PageTitle>

<style>
    body {
        background-color: #e8fcee;
        
        
    }
    .testCss {
        
    }
</style>

@if (showModal) {
    <Modal Title="Greetings, choose your Title and Name" OnClose="HandleCloseModal" />
}

<div style="display: flex; flex-direction: column; width: max-content;">
<h3 style="font-size: 25px; text-align: center; font-family: garamond, cursive;">@($"{GlobalSave.NewSave.PlayerInfo.KingdomName}")</h3>
<h3 style="font-size: 18px; text-align: center; font-family: garamond, cursive;">@($"Owned by: {GlobalSave.NewSave.PlayerInfo.Title} {GlobalSave.NewSave.PlayerInfo.Name}")</h3>
<div style="width: 400px; height: 400px; background-color: aliceblue;"></div>
</div>

 <button @onclick="BuildWizard">Wizard +5</button> 


<button @onclick="ResetFile">RESET FILE</button>

@code {
    public bool paused = false;
    public CancellationTokenSource cancellationTokenSource;
    public  CancellationToken cancellationToken;
    bool showModal = false;
    bool lightDirectionRight = true;
    bool lightDirectionRightInner = true;
    bool shouldRender = true;
    int currentCase = 1;
    string[] colorAnimationSchemeLight =["#f8fc6f","#e9ed55", "#e1e62e", "#c7cc06", "#fcbc62", "#e6a64c", "#cc8829", "#a8680f", "#854e03", "#ed773b",
                                        "#cc5c23", "#a3400d", "#7d2c02", "#eb6854", "#c44531", "#9c2816", "#7d190a", "#9c0e0e",
                                         "#ede855", "#cfca48", "#b5b13e", "#999634", "#7d7a29", "#615f20", "#474618", "#363412", "#362612", "#573d1d",
                                         "#755227", "#946832", "#b07c3c", "#cf9146", "#f0a74f","#f08d4f", "#d67e47", "#b86c3d", "#965933", "#7a4828", "#57331c",
                                          "#451e15", "#662c1f", "#8a3b29", "#b04c35", "#d45b3f", "#f06748"];
    string[] colorAnimationSchemeLightInner =["#f55", "#de4747", "#ba3a3a", "#ba3a3a", "#ba3a3a", "#ba3a3a", "#2e0e0e", "#2e0e0e", "#691f1f", "#822626", 
                                              "#9e2e2e", "#b83535", "#b83535", "#d43d3d", "#fa4848"];
    int lightAnimationValue = 0;
    int lightAnimationInnerValue = 0;
    
    protected override async Task OnInitializedAsync(){

        if (GlobalVariable.TimerStarted == false){
            GlobalSave.NewSave = new TutorialSave();
        }
        GlobalPage.PageNumber = 1;
        CastleAnimation();

         if (await localStorage.GetItemAsync<EmptySave>("saveState") == null){
            await localStorage.SetItemAsync<EmptySave>("saveState", GlobalSave.NewSave);
            showModal = true;
            GlobalSave.NewSave = await localStorage.GetItemAsync<EmptySave>("saveState");
        }
        else {
            GlobalSave.NewSave = await localStorage.GetItemAsync<EmptySave>("saveState");
        }

        if (GlobalVariable.TimerStarted == false){
            GlobalVariable.FirstRender = false;
            cancellationTokenSource = new CancellationTokenSource();
            cancellationToken = cancellationTokenSource.Token;
            GlobalVariable.TimerStarted = true;
            await GameTimer();
            
        }
    }

    public async Task ResetFile() {
        await localStorage.RemoveItemAsync("saveState");
        NavManager.NavigateTo("/", forceLoad:true); // reloads the page so that creation of a new character can trigger
    }
    public async Task GameTimer(){
        while (GlobalVariable.TimerStarted){
            try {
                await localStorage.SetItemAsync<EmptySave>("saveState", GlobalSave.NewSave);
                Console.WriteLine("Game Saved");
                await Task.Delay(500);
                StateHasChanged();
            }
            catch (TaskCanceledException) {
            }
        }
    }

    public async Task KingdomCombat() {
        
    }

    public void BuildWizard() {
        GlobalSave.NewSave.PlayerUnits.Wizards +=5;
        GlobalSave.NotifyPlayerUnitsChanged();
    
    }

    public async Task CastleAnimation() {
        while (GlobalPage.PageNumber == 1){
            if (lightAnimationValue == 0){
                lightDirectionRight = true;
                lightAnimationValue ++;
            }
            else if (lightAnimationValue == colorAnimationSchemeLight.Length-1){
                lightDirectionRight = false;
            }
            if (lightDirectionRight){
                lightAnimationValue ++;
            }
            else {
                lightAnimationValue --;
            }
            if (lightAnimationInnerValue == 0){
                lightDirectionRightInner = true;
                lightAnimationInnerValue ++;
            }
            else if (lightAnimationInnerValue == colorAnimationSchemeLightInner.Length-1){
                lightDirectionRightInner = false;
            }
            if (lightDirectionRightInner){
                lightAnimationInnerValue ++;
            }
            else {
                lightAnimationInnerValue --;
            }
            StateHasChanged();
            await Task.Delay(200);
        }
    }
    private void StopTimer() {
        cancellationTokenSource?.Cancel();
    }
     private async Task HandleSubmit(string titleAndName)
    {
        showModal = false;
        // You can use the titleAndName value here
        await Task.CompletedTask;
    }

    void ToggleModal()
    {
        showModal = !showModal;
    }
    void HandleCloseModal()
    {
        showModal = false; // Update the showModal variable to close the modal
    }
}

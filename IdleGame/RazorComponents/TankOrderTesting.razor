@inject IJSRuntime JSRuntime
@inject GlobalSave GlobalSave
@using Models.GlobalVariables
@using System.Reflection
@using System.Text

<style>
    .draggable-item {
        background-color: #d4f0dc;
    }
    .draggable-item:hover {
        background-color: #9dbfa7;
        color: red;
    }
    .enemy-units{
       
    }
    .test-css {
    }
    body {
         background-color: #e8fcee;
    }
    
</style>


<div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px;">
    <div style = "cursor: grab;"><IdleGame.RazorComponents.SortableList Id="sortable" Items="playerItems.OrderBy(item => item.TankOrder).ToList()" OnUpdate="@SortListPlayer" Context="item1" Put ="false">
            <SortableItemTemplate>
                <div class="draggable-item" style=" cursor: grab; user-select: none; border: solid black; border-radius: 10px; padding: 5px; margin: 2px 0;">
                    <div>@item1.Name 
                        <i class=" @((item1 == playerItems.OrderBy(item => item.TankOrder).FirstOrDefault()) ? "fa-solid fa-shield-halved" : "")" style="color: #13489e;"></i></div>
                </div>
            </SortableItemTemplate>
    </IdleGame.RazorComponents.SortableList>
    </div>
    <div><IdleGame.RazorComponents.SortableList Id="unsortable" Items="enemyItems.OrderBy(item => item.TankOrder).ToList()" OnUpdate="@SortListEnemy" Context="item1" Put ="false" Filter=".enemy-units" Sort="false">
            <SortableItemTemplate>
                <div class="enemy-units" style="background-color: #d4f0dc; user-select: none; border: solid black; border-radius: 10px; padding: 5px; margin: 2px 0;">
                    <div class ="@(item1.Id == 1 ? "test-css" : "") ">@item1.Name 
                        <i class=" @((item1 == enemyItems.OrderBy(item => item.TankOrder).FirstOrDefault()) ? "fa-solid fa-shield-halved" : "")" style="color: #13489e;"></i></div>
                </div>
            </SortableItemTemplate>
    </IdleGame.RazorComponents.SortableList>
    </div>
</div

    @* <div class="progress-bar">
    <div id="progressBarFill" class="progress-bar-fill"></div>
</div> *@

<br>
<br>
<br>
@* <button @onclick="PopulateItems">Populate Items</button>
<button @onclick="PopulatePlayerItemList">Populate Tankorder List</button> *@

@code {
    
    [Parameter]
    public object? PlayerBattalions { get; set; }
    [Parameter]
    public object? EnemyBattalions {get; set;}
    private string backgroundColor = "#9dbfa7";
    List<int> playerItemTankOrders = new();
    List<string> playerItemNameOrder = new();
    

    public class PlayerItem {
        public int? Id { get; set; }
        public string? Name { get; set; }
        public int? Count { get; set; }
        public int TankOrder { get; set; }
        public bool? Visible {get; set;}
    }
    public class EnemyItem {
        public int? Id { get; set; }
        public string? Name { get; set; }
        public int? Count { get; set; }
        public int? TankOrder { get; set; }
        public bool? Visible {get; set;}
    }

    private List<PlayerItem> playerItems = new();
    private List<EnemyItem> enemyItems = new(); 

    private async Task PopulatePlayerItemList() {
        foreach (var item in playerItems){
            playerItemTankOrders.Add(item.TankOrder);
            playerItemNameOrder.Add(item.Name);
        }
        foreach (var item in playerItemTankOrders){
            Console.WriteLine($"Tank Order: {item}");
        }

        foreach (var item in playerItemNameOrder){
            Console.WriteLine($"Unit Name: {item}");
        }
    }
    
    private async Task PopulatePlayerItems() {

        foreach (PropertyInfo unit in PlayerBattalions.GetType().GetProperties()) {
            var unitCount = unit.GetValue(PlayerBattalions);
            if (unitCount != null) {
                var unitProperty = unitCount.GetType().GetProperty("Unit");
                var countProperty = unitCount.GetType().GetProperty("Count");
                if (unitProperty != null) {
                    var unitInstance = unitProperty.GetValue(unitCount);
                    var numUnits = (int)countProperty.GetValue(unitCount);
                    var nameProperty = unitInstance.GetType().GetProperty("Name");
                    var tankProperty = unitInstance.GetType().GetProperty("TankOrder");
                    var unitName = nameProperty?.GetValue(unitInstance)?.ToString();
                    var unitTankOrder = Convert.ToInt32(tankProperty?.GetValue(unitInstance));

                    if (numUnits > 0 && !playerItems.Any(item => item.TankOrder == unitTankOrder)) {
                        playerItems.Add(new PlayerItem {
                            Id = unitTankOrder,
                            Name = unitName,
                            Count = numUnits,
                            TankOrder = unitTankOrder,
                            Visible = true
                        });
                    }
                    else if (numUnits == 0 && !playerItems.Any(item => item.TankOrder == unitTankOrder)) {
                        playerItems.Add(new PlayerItem {
                            Id = unitTankOrder,
                            Name = unitName,
                            Count = numUnits,
                            TankOrder = unitTankOrder,
                            Visible = false
                        });
                    }
                }
            }
        }

        // Explicitly trigger a UI update
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync() {
        Console.WriteLine("Page is initialized");
        await PopulatePlayerItems();
        await PopulateEnemyItems();
        await InvokeAsync(StateHasChanged);
    }
    private async Task PopulateEnemyItems() {

        foreach (PropertyInfo unit in EnemyBattalions.GetType().GetProperties()) {
            var unitCount = unit.GetValue(EnemyBattalions);
            if (unitCount != null) {
                var unitProperty = unitCount.GetType().GetProperty("Unit");
                var countProperty = unitCount.GetType().GetProperty("Count");
                if (unitProperty != null) {
                    var unitInstance = unitProperty.GetValue(unitCount);
                    var numUnits = (int)countProperty.GetValue(unitCount);
                    var nameProperty = unitInstance.GetType().GetProperty("Name");
                    var tankProperty = unitInstance.GetType().GetProperty("TankOrder");
                    var unitName = nameProperty?.GetValue(unitInstance)?.ToString();
                    var unitTankOrder = Convert.ToInt32(tankProperty?.GetValue(unitInstance));

                    if (numUnits > 0 && !enemyItems.Any(item => item.TankOrder == unitTankOrder)) {
                        enemyItems.Add(new EnemyItem {
                            Id = unitTankOrder,
                            Name = unitName,
                            Count = numUnits,
                            TankOrder = unitTankOrder,
                        });
                    }
                }
            }
        }
    }
    private async Task PopulateItems() {
        await PopulatePlayerItems();
        await PopulateEnemyItems();
    }

    private void SortListPlayer((int oldIndex, int newIndex) indices) {
        // Deconstruct the tuple
        var (oldIndex, newIndex) = indices;

        if (oldIndex < 0 || oldIndex >= playerItems.Count || newIndex < 0 || newIndex > playerItems.Count) {
            return; // Ensure indices are within bounds
        }

        // Reorder playerItems based on the new index
        var itemToMove = playerItems[oldIndex];
        playerItems.RemoveAt(oldIndex);

        if (newIndex < playerItems.Count) {
            playerItems.Insert(newIndex, itemToMove);
        }
        else {
            playerItems.Add(itemToMove);
        }

        // Update TankOrder to reflect new order
        for (int i = 0; i < playerItems.Count; i++) {
            playerItems[i].TankOrder = i + 1; // Assuming TankOrder should be sequential and 1-based
        }

        // Update the TankOrder in the global save variable
        var battalions = GlobalSave.NewSave.PlayerUnits;
        foreach (PropertyInfo unit in battalions.GetType().GetProperties()) {
            var unitCount = unit.GetValue(battalions);
            if (unitCount != null) {
                var unitProperty = unitCount.GetType().GetProperty("Unit");
                var countProperty = unitCount.GetType().GetProperty("Count");
                if (unitProperty != null) {
                    var unitInstance = unitProperty.GetValue(unitCount);
                    var nameProperty = unitInstance.GetType().GetProperty("Name");
                    var tankProperty = unitInstance.GetType().GetProperty("TankOrder");
                    var count = countProperty.GetValue(unitCount);
                    foreach (var item in playerItems) {
                        if (nameProperty?.GetValue(unitInstance)?.ToString() == item.Name) {
                            tankProperty?.SetValue(unitInstance, item.TankOrder);
                            item.Count = (int?)count;
                            break;
                        }
                    }
                }
            }
        }

        // Print out for debugging
        foreach (var item in playerItems) {
            Console.WriteLine($"{item.Name}: {item.TankOrder}");
        }

        // Trigger state change to update UI
        StateHasChanged();
    }


    private void SortListEnemy((int oldIndex, int newIndex) indices)
        {
            Console.WriteLine("List Sorted");
            // deconstruct the tuple
            var (oldIndex, newIndex) = indices;

            var items = this.enemyItems;
            var itemToMove = items[oldIndex];
            items.RemoveAt(oldIndex);

            if (newIndex < items.Count)
            {
                items.Insert(newIndex, itemToMove);
            }
            else
            {
                items.Add(itemToMove);
            }

            StateHasChanged();
        }

}
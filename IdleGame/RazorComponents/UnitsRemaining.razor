@using System.Reflection
@using System.Text

<style>
    .testDiv {
        background-color: #e8fcee;
        font-size: 13px;
        width: 100%;
        display: flex;
        flex-wrap: wrap; /* Allow wrapping to the next line */
        justify-content: space-between; /* Distribute items evenly */
        height: fit-content;
    }
    .unitDiv {
        background-color: #d4f0dc;
        margin: 3px 0; /* Adjust margins for better fitting */
        padding: 3px; /* Increase padding for better appearance */
        border: 1px solid #a3d9b3;
        flex: 0 0 49%; /* Each item takes up 49% of the width */
        box-sizing: border-box; /* Ensure padding and border are included in the width and height */
        height: fit-content;
        position: relative;
    }
    .unitDivHeader {
        font-weight: bold;
    }
    .unitDivContent {
        position: relative;
    }
    .unitDiv:hover .tooltip-container {
        display: block;
    }
    .unitDiv .tooltip {
        background-color: #333;
        color: #fff;
        text-align: center;
        border-radius: 4px;
        padding: 5px;
        opacity: 0.95; /* Slight transparency for a better look */
        width: max-content; /* Set the width of the tooltip */
        border: 3px solid grey; /* Add a 3 pixel grey border */
    }
    .unitDiv:hover .tooltip {
        display: block;
    }
    .unitDiv .tooltip::after {
        content: "";
        position: absolute;
        top: -5px; /* Move the arrow to the top */
        left: 50%;
        transform: translateX(-50%);
        border-width: 5px;
        border-style: solid;
        border-color: transparent transparent #333 transparent;
    }
    body {
        background-color: #e8fcee;
    }
</style>


<div class="testDiv">
    @foreach (PropertyInfo unit in Battalions.GetType().GetProperties()) {
        var thisUnit = unit.GetValue(Battalions);
        if (thisUnit != null){
            var unitProperty = thisUnit.GetType().GetProperty("Unit");
            var countProperty = thisUnit.GetType().GetProperty("Count");
            var hpProperty = thisUnit.GetType().GetProperty("HP");
            if (unitProperty != null){
                var unitInstance = unitProperty.GetValue(thisUnit);
                var numUnits = countProperty.GetValue(thisUnit);
                var nameProperty = unitInstance.GetType().GetProperty("Name");
                var healthProperty = unitInstance.GetType().GetProperty("Health");
                var unitName = nameProperty?.GetValue(unitInstance)?.ToString();
                if ((int)numUnits > 0){
                    // Calculate HP percentage
                    var hp = (int?)hpProperty.GetValue(thisUnit);
                    var maxHp = (int?)healthProperty.GetValue(unitInstance);
                    var hpPercentage = (double)hp / maxHp * 100;

                    <div class="unitDiv">
                        <Tooltip Content="@(GetTooltipContent(unitInstance))">
                            <div class="unitDivContent" style="display: flex; justify-content: space-between; width: 100%; height: 100%;">
                                <div class="leftColumn" style="display: flex; flex-direction: column; width: 48%;">
                                    <div class="unitDivHeader" style="font-weight: bold;">@unitName</div>
                                    <div style="">Count: @(numUnits)</div>
                                </div>
                                <div class="rightColumn" style="display: flex; flex-direction: column; width: 48%; text-align: right;">
                                    <div style="margin-right: 2px; font-weight: bold; background: linear-gradient(to right, #56f580 @hpPercentage%, red @hpPercentage%);">
                                        @($"HP: {hp}/{maxHp}")
                                    </div>
                                    <div style="margin-right: 2px;">@($"")</div>
                                </div>
                            </div>
                        </Tooltip>
                    </div>
                }
            }
        }
    }
</div>

@code {
    [Parameter]
    public object? Battalions { get; set; }
    [Parameter]
    public int? HP {get; set;}

    public MarkupString GetTooltipContent(object unitInstance) {
        StringBuilder tooltipContent = new StringBuilder();
        foreach (PropertyInfo property in unitInstance.GetType().GetProperties()) {
            if (property.Name == "Name"){
                tooltipContent.AppendLine($"<span style=\"color: red; font-weight: bold;\">{property.GetValue(unitInstance)}</span><hr style=\"margin: 5px;\">");
            }
            else if (property.Name == "Health") {
                tooltipContent.AppendLine($"Health: {property.GetValue(unitInstance)}<br />");
            }
            else if (property.Name == "MagicOffence") {
                tooltipContent.AppendLine($"Magic Attack: {property.GetValue(unitInstance)}<br />");
            }
            else if (property.Name == "MagicDefence") {
                tooltipContent.AppendLine($"Magic Defence: {property.GetValue(unitInstance)}<br />");
            }
            else if (property.Name == "RangeOffence") {
                tooltipContent.AppendLine($"Range Attack: {property.GetValue(unitInstance)}<br />");
            }
            else if (property.Name == "RangeDefence") {
                tooltipContent.AppendLine($"Range Defence: {property.GetValue(unitInstance)}<br />");
            }
            else if (property.Name == "MeleeOffence") {
                tooltipContent.AppendLine($"Melee Attack: {property.GetValue(unitInstance)}<br />");
            }
            else if (property.Name == "MeleeDefence") {
                tooltipContent.AppendLine($"Melee Defence: {property.GetValue(unitInstance)}<br />");
            }
        }
        return new MarkupString(tooltipContent.ToString());
    }
}

@inject IJSRuntime JSRuntime
@inject GlobalSave GlobalSave
@using Models.GlobalVariables
@using System.Reflection
@using System.Text

<style>
    .draggable-item {
        cursor: grab;
    }
    .draggable-item:hover {
        color: @(hoverColor);
        background-color: @(backGroundColor) !important;
    }
    .dragging-over {
        color: red;
        background-color: #9dbfa7 !important;
    }
    
    
</style>

<ul class="list-group">
    @foreach (var item in DynamicItems)
    {
        <li draggable="@IsPlayerUnit"
            class="list-group-item @(Convert.ToBoolean(IsPlayerUnit) ? "draggable-item" : "") @(IsDraggedOver(item) ? "dragging-over" : "")"
            style="background-color: #d4f0dc;"
            @key=@item.TankOrder
            @onmousedown="@( () => OnMouseDown(item))"
            @onmouseup="@( () => OnMouseUp(item))"
            @ondragstart="@( () => OnDragStart(item))"
            @ondragend="@( () => OnDragEnd(item))"
            @ondragover:preventDefault
            @ondragover="@( () => OnDragOver(item))">
            @item.Name @item.Id <i class=" @((item == DynamicItems.OrderBy(item => item.TankOrder).FirstOrDefault()) ? "fa-solid fa-shield-halved" : "")" style="color: #13489e;"></i>
        </li>
    }
</ul>   

@code {

    private Item? draggedItem;
    private Item? targetItem;
    private string hoverColor = "red";
    private string backGroundColor ="#9dbfa7";
    public bool tank = true;

    // Bool to check if tank order should be draggable or not based on if player unit or enemy unit

    [Parameter]
    required public string IsPlayerUnit {get; set;}
    [Parameter]
    public object? Battalions { get; set; }

    public class Item {
        public int Id { get; set; }
        public string Name { get; set; }
        public int Count { get; set; }
        public int TankOrder { get; set; }
    }

    private List<Item> DynamicItems = new();

    protected override void OnInitialized() {
        PopulateDynamicItems();
    }

    private void PopulateDynamicItems() {
        int id = 1;
        foreach (PropertyInfo unit in Battalions.GetType().GetProperties()) {
            var unitCount = unit.GetValue(Battalions);
            if (unitCount != null) {
                var unitProperty = unitCount.GetType().GetProperty("Unit");
                var countProperty = unitCount.GetType().GetProperty("Count");
                if (unitProperty != null) {
                    var unitInstance = unitProperty.GetValue(unitCount);
                    var numUnits = (int)countProperty.GetValue(unitCount);
                    var nameProperty = unitInstance.GetType().GetProperty("Name");
                    var tankProperty = unitInstance.GetType().GetProperty("TankOrder");
                    var unitName = nameProperty?.GetValue(unitInstance)?.ToString();
                    var unitTankOrder = Convert.ToInt32(tankProperty?.GetValue(unitInstance));
                    if (numUnits > 0) {
                        DynamicItems.Add(new Item {
                            Id = id++,
                            Name = unitName,
                            Count = numUnits,
                            TankOrder = unitTankOrder
                        });
                    }
                }
            }
        }
    }

    private bool IsDraggedOver(Item item)
    {
        return targetItem != null && targetItem == item;
    }

    private void OnMouseDown(Item item) {
        draggedItem = item;
        
    }
    private void OnMouseUp(Item item) {
        draggedItem = null;
        

    }

    private void OnDragStart(Item item) {
        hoverColor = "black";
        backGroundColor = "#b4d4bd";
        
    }
    private async void OnDragEnd(Item item)
    {
        targetItem = item;
        if (draggedItem != null && targetItem != null)
        {
            draggedItem = null;
            targetItem = null;
        }
        hoverColor = "red";
        await Task.Delay(1);
        ResetItemIds();
        await InvokeAsync(StateHasChanged);
    }

        private void OnDragOver(Item item) {
            targetItem = item;
            if (draggedItem != null && targetItem != null && draggedItem != targetItem) {
                var draggedIndex = DynamicItems.IndexOf(draggedItem);
                var targetIndex = DynamicItems.IndexOf(targetItem);
                if (draggedIndex != targetIndex) {

                    // Rearrange the TankOrder values
                    int tempOrder = draggedItem.TankOrder;
                    draggedItem.TankOrder = targetItem.TankOrder;
                    targetItem.TankOrder = tempOrder;
                    
                    // Update the list
                    DynamicItems.Remove(draggedItem);
                    DynamicItems.Insert(targetIndex, draggedItem);
                }
            }
        }
    private void ResetItemIds() {
        int id = 1;
        foreach (var item in DynamicItems) {
            item.Id = id++;
        } 
    }
}